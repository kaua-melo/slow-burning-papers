#version 150

out vec4 outputColor;

// the factor passed by the OF app.

uniform vec4 pos;

uniform vec4 c1;
uniform vec4 c2;
uniform vec4 c3;
uniform vec4 c4;

layout(origin_upper_left) in vec4 gl_FragCoord;

void main()
{
    // gl_FragCoord contains the window relative coordinate for the fragment.
    // we use gl_FragCoord.x position to control the red color value.
    // we use gl_FragCoord.y position to control the green color value.
    // please note that all r, g, b, a values are between 0 and 1.


    float windowWidth = 1024.0;
    float windowHeight = 768.0;  

	float f = gl_FragCoord.y / windowHeight;

	float r,g,b;
	
	r = c1.x + f*(c2.x - c1.x);
	g = c1.y + f*(c2.y - c1.y);
	b = c1.z + f*(c2.z - c1.z);

/*
	float percentage;

	// First section
	if(f<=pos.y)
	{
		// section limits
		float yi = pos.x;
		float yf = pos.y;

		percentage = (f - yi)/(yf-yi);

		r = c1.x + percentage*(c2.x - c1.x);
		g = c1.y + percentage*(c2.y - c1.y);
		b = c1.z + percentage*(c2.z - c1.z);
	}
	// Second section
	else if(f>pos.y && f<=pos.z)
	{
		// section limits
		float yi = pos.y;
		float yf = pos.z;

		percentage = (f - yi)/(yf-yi);

		r = c2.x + percentage*(c3.x - c2.x);
		g = c2.y + percentage*(c3.y - c2.y);
		b = c2.z + percentage*(c3.z - c2.z);
	}
	// Third section
	else if(f>pos.z && f<=pos.w)
	{
		// section limits
		float yi = pos.z;
		float yf = pos.w;

		percentage = (f - yi)/(yf-yi);

		r = c3.x + percentage*(c4.x - c3.x);
		g = c3.y + percentage*(c4.y - c3.y);
		b = c3.z + percentage*(c4.z - c3.z);
	}
*/

	float a = 1.0;
    
	outputColor = vec4(r, g, b, a);

    
    /*Anything marked "out" goes the next stage in the shading pipeline. For the fragment shader that next stage is to put a pixel into the framebuffer, so you need to one and only one "out" from a fragment shader. A vertex shader can have multiple "out" variables that are just passed to the fragment shader, while a fragment shader is just figuring out what color should be sent on for each pixel based on all the values passed from the vertex shader.*/
}
